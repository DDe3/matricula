package com.ing_software.forms;

import com.ing_software.entity.Cuenta;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;

public class Administrador extends JFrame {
    private JPanel adminPanel;
    private JButton logOutButton;
    private JLabel welcomeLabel;
    private JButton gestionarAlumnoButton;
    private JButton gestionarProfesorButton;
    private JButton gestionarAdministradorButton;
    private JButton gestionarCursosButton;
    private JLabel textLabel;
    private Cuenta cuenta;
    private JButton alumno;
    private JFrame gestionarAlumno;
    private JFrame gestionarCurso;
    private JFrame gestionAdmin;
    private JFrame gestionProfesor;


    public Administrador(String title, Cuenta c) throws HeadlessException {
        super(title);
        this.cuenta = c;
        welcomeLabel.setText("Bienvenid@: " + this.cuenta.getOwner3().getNombre());
        welcomeLabel.setFont(new Font("Calibri", Font.BOLD, 28));
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(adminPanel);
        this.pack();


        gestionarAlumnoButton.addActionListener(e -> {
            if (gestionarAlumno == null) {
                gestionarAlumno = new GestionarAlumno("Gestion de Alumnos");
            }
            gestionarAlumno.setVisible(true);
        });

        logOutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFrame login = new Login("Sistema de Matriculacion - Log In");
                login.setVisible(true);
                cerrar();
            }
        });
        gestionarCursosButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (gestionarCurso == null) {
                    gestionarCurso = new GestionarCurso("Gestion de Cursos y Materias");
                }
                gestionarCurso.setVisible(true);
            }
        });

        gestionarAdministradorButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (gestionAdmin == null) {
                    gestionAdmin = new GestionarAdministrador("Gestion de Administrador");
                }
                gestionAdmin.setVisible(true);
            }
        });
        gestionarProfesorButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (gestionProfesor == null) {
                    gestionProfesor = new GestionarProfesor("Gestion de Profesor");
                }
                gestionProfesor.setVisible(true);
            }
        });
    }


    private void cerrar() {
        this.dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        adminPanel = new JPanel();
        adminPanel.setLayout(new GridLayoutManager(5, 6, new Insets(0, 0, 0, 0), -1, -1));
        welcomeLabel = new JLabel();
        welcomeLabel.setText("Label");
        adminPanel.add(welcomeLabel, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(319, 16), null, 0, false));
        textLabel = new JLabel();
        Font textLabelFont = this.$$$getFont$$$("JetBrains Mono", Font.BOLD, 28, textLabel.getFont());
        if (textLabelFont != null) textLabel.setFont(textLabelFont);
        textLabel.setText("SISTEMA DE INFORMACION Y MATRICULACION");
        adminPanel.add(textLabel, new GridConstraints(3, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        gestionarAlumnoButton = new JButton();
        gestionarAlumnoButton.setText("Gestionar Alumno");
        adminPanel.add(gestionarAlumnoButton, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        gestionarProfesorButton = new JButton();
        gestionarProfesorButton.setText("Gestionar Profesor");
        adminPanel.add(gestionarProfesorButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        gestionarAdministradorButton = new JButton();
        gestionarAdministradorButton.setText("Gestionar Administrador");
        adminPanel.add(gestionarAdministradorButton, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        gestionarCursosButton = new JButton();
        gestionarCursosButton.setText("Gestionar Cursos");
        adminPanel.add(gestionarCursosButton, new GridConstraints(1, 4, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        adminPanel.add(spacer1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        adminPanel.add(spacer2, new GridConstraints(3, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        logOutButton = new JButton();
        logOutButton.setIcon(new ImageIcon(getClass().getResource("/icon/logout_icon_151219.png")));
        logOutButton.setText("");
        adminPanel.add(logOutButton, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        adminPanel.add(spacer3, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        adminPanel.add(spacer4, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return adminPanel;
    }

}
