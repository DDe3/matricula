package com.ing_software.forms;

import com.ing_software.Principal;
import com.ing_software.abstraccion.Case;
import com.ing_software.abstraccion.Result;
import com.ing_software.entity.Cuenta;
import com.ing_software.servicios.ServicioCuenta;


import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.regex.Pattern;

import static com.ing_software.abstraccion.Case.defaultCase;
import static com.ing_software.abstraccion.Case.mcase;
import static com.ing_software.abstraccion.Result.failure;
import static com.ing_software.abstraccion.Result.success;


public class Login extends JFrame {


    ServicioCuenta servicio = Principal.se.select(ServicioCuenta.class).get();
    final Pattern emailPattern = Pattern.compile("^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$");


    private JLabel label_msg;
    private JPanel panelLogin;
    private JTextField mail;
    private JLabel correoLabel;
    private JButton ingresarButton;
    private JButton registrarseButton;
    private JComboBox<String> modo;
    private JPasswordField password;


    public Login(String title) throws HeadlessException {
        super(title);
        setup().join();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(panelLogin);
        this.pack();


        ingresarButton.addActionListener(e -> {

            try {
                String nombre = mail.getText();
                if (!emailPattern.matcher(nombre).matches()) {
                    JOptionPane.showMessageDialog(null, "Ingrese un correo válido");
                    mail.setText("");
                    password.setText("");
                } else {
                    String pass = password.getText();
                    Optional<Cuenta> c = servicio.findCuenta(nombre, pass);
                    int i = modo.getSelectedIndex();
                    Result<String> result = Case.match(
                            defaultCase(() -> failure("No existe una cuenta con esos datos")),
                            mcase(() -> nombre.equals("") || pass.equals(""), () -> failure("Ingrese todos los datos")),
                            mcase(() -> c.isPresent() && verificarModo(c.get()), () -> success(""))
                    );
                    result.bind(x ->
                    {
                        if (i == 0) {
                            goToEstudiante();
                        } else if (i == 1) {
                            goToProfesor();
                        } else {
                            goToAdministrador(c.get());
                        }
                    }, x -> JOptionPane.showMessageDialog(null, x));
                }

            } catch (Exception ignored) {

            }


        });


        registrarseButton.addActionListener(e -> goToSignIn());
    }


    private void goToEstudiante() {
        JOptionPane.showMessageDialog(null, "Ingresaste a tu cuenta estudiante");
    }

    private void goToAdministrador(Cuenta c) {
        JFrame admin = new Administrador("Sistema de Información - Administrador", c);
        admin.setVisible(true);
        this.dispose();
    }

    private void goToProfesor() {
        JOptionPane.showMessageDialog(null, "Ingresaste a tu cuenta profesor");
    }

    private boolean verificarModo(Cuenta c) {
        if (c != null) {
            int i = modo.getSelectedIndex();
            if (i == 0) {
                return c.getOwner1() != null;
            }
            if (i == 1) {
                return c.getOwner2() != null;
            }
            if (i == 2) {
                return c.getOwner3() != null;
            }
        } else {
            return false;
        }
        return false;
    }

    private void goToSignIn() {
        JFrame signin = new Signin("Sistema de informacion");
        signin.setVisible(true);
        this.dispose();
    }


    private CompletableFuture<Void> setup() {
        return CompletableFuture.runAsync(this::setupAux, Principal.e);

    }

    private void setupAux() {
        DefaultComboBoxModel<String> modos = new DefaultComboBoxModel<>();
        modos.addElement("Estudiante");
        modos.addElement("Profesor");
        modos.addElement("Administrador");
        modo.setModel(modos);

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelLogin = new JPanel();
        panelLogin.setLayout(new GridBagLayout());
        mail = new JTextField();
        mail.setEditable(true);
        mail.setEnabled(true);
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 5);
        panelLogin.add(mail, gbc);
        correoLabel = new JLabel();
        correoLabel.setText("Correo");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panelLogin.add(correoLabel, gbc);
        ingresarButton = new JButton();
        ingresarButton.setText("Ingresar");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.insets = new Insets(10, 10, 10, 10);
        panelLogin.add(ingresarButton, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("Password");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panelLogin.add(label1, gbc);
        registrarseButton = new JButton();
        registrarseButton.setText("Registrarse");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.insets = new Insets(10, 10, 10, 10);
        panelLogin.add(registrarseButton, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        panelLogin.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 10, 5, 10);
        panelLogin.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 10, 0, 10);
        panelLogin.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 10, 0, 10);
        panelLogin.add(spacer4, gbc);
        label_msg = new JLabel();
        Font label_msgFont = this.$$$getFont$$$("JetBrains Mono", Font.PLAIN, 20, label_msg.getFont());
        if (label_msgFont != null) label_msg.setFont(label_msgFont);
        label_msg.setText("INICIAR SESION");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 10, 0, 0);
        panelLogin.add(label_msg, gbc);
        modo = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 10, 0, 10);
        panelLogin.add(modo, gbc);
        password = new JPasswordField();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 5);
        panelLogin.add(password, gbc);
        correoLabel.setLabelFor(mail);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelLogin;
    }

}
